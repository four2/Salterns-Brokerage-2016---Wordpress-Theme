<?php//Variables and functions needed for TheYachtMarket LiveFeedback.//Include NuSoap library for making requests to TheYachtMarket LiveFeedback web service.require_once("nusoap-0.9.5/lib/nusoap.php");//URL of TheYachtMarket LiveFeedback web service.$liveFeedbackApiUrl = "https://api.theyachtmarket.com/livefeedbackboats/2.1.asmx?WSDL";//Your API key for TheYachtMarket LiveFeedback.//If this is blank, you will need to obtain a LiveFeedback API key from www.TheYachtMarket.com.//The API key should be treated like a password i.e. keep it secret to prevent other people gaining access to your listings.$liveFeedbackApiKey = "af541c3a-b4e4-4c28-b873-6d94ed72d054";//Generic error message to display if the call to LiveFeedback fails.$liveFeedbackFetchError = "Sorry, an error occurred whilst retrieving the data, please try again later.";//How many results to show per page. 0 = all results on a single page.$liveFeedbackSearchResultsPerPage = 10;//How many characters of each boat's description to return in the search results (set to zero if not displaying the description).$liveFeedbackSearchResultsDescriptionLength = 200;//Show all boats for this LiveFeedback API key (false) or just those boats marked for export for this API key (true)?$liveFeedbackOnlyBoatsMarkedForExport = false;//Adds a key/value pair to an array as long as the trimmed value is not blank.function addKeyValuePair(&$array, $key, $value, $suffix = "", $decimalPlaces = ""){	//Trim value of spaces.	$value = trim($value);	//Add key value pair with suffix to array if trimmed value is not blank.	if($value != ""){		if ($decimalPlaces != ""){			//Round to specified number of decimal places.			$value = number_format($value, (int)$decimalPlaces);		}		//Add the value to the array with the suffix.		$array[$key] = $value . $suffix;	}}//Remove mulitple newline chars.function removeMultipleAdjacetNewlineChars($subject, $maxAllowed){	//Recursively calls self to reduce number of adjacent line breaks in $subject to maximum number specicfied in $maxAllowed.	//Create a replace string containing $maxAllowed newline characters.	for ($i=1; $i<=$maxAllowed; $i++){		$replace .= "\n";	}	//Create a find string containing $maxAllowed + 1 newline characters.	$find = $replace . "\n";	//Replace ASCII (extened) chars 160 and 194 with spaces.	$subject = str_replace(chr(160), " ", $subject);	$subject = str_replace(chr(194), " ", $subject);	//Strip any spaces from between newline chars.	$subject = preg_replace("/\n[[:blank:]]+\n/", "\n\n", $subject);	//Find any occurrence of $maxAllowed + 1 adjacted newline chars and replce with $maxAllowed newline chars.	$subject = preg_replace("/" . $find . "/", $replace, $subject);	//Are there any ocurrences of $maxAllowed + 1 adjacent newline chars still in the string?	if (preg_match("/" . $find . "/", $subject) || preg_match("/\n[[:blank:]]+\n/", $subject)){		//There are still too many adjacent line breaks - so call this function again.		$subject = removeMultipleAdjacetNewlineChars($subject, $maxAllowed);	}	return $subject;}function normaliseLineBreaks($subject){	//Replace all CRLF with LF.	$subject = str_replace("\r\n", "\n", $subject);	//Replace all CR with LF.	$subject = str_replace("\r", "\n", $subject);	return $subject;}function fixLineBreaks($subject, $returnLineBreaksAsHtml){	//Normalise line breaks.	$subject = normaliseLineBreaks($subject);	//Convert <p> tags to newline characters.	$subject = preg_replace("/<p[^>]*>/i", "\n", $subject);	//Remove any closing <p> tags.	$subject = str_ireplace("</p>", "", $subject);	//Remove any <br /> tags, replacing with newline chars.	$subject = preg_replace("/<br[^>]*>/i", "\n", $subject);	//Remove mulitple newline chars (allowing a maximum of two adjacent ones).	$subject = removeMultipleAdjacetNewlineChars($subject, 2);	//Trim leading/trailing spaces and newline chars.	$subject = trim($subject);	if ($returnLineBreaksAsHtml == true){		//Convert newline chars to <br />.		$subject = nl2br($subject);	}	return $subject;}//Shows the result of a muti-dimensional array returned by a call to the web service.function showWsdl($wsdlResult){	echo("<h2>WSDL Result</h2>");	echo("<pre>");	print_r($wsdlResult);	echo("</pre>");	echo("<hr />");}//Create a querystring containing search parameters to pass to the search results page.function createSearchPageQueryString($page, $saleCharter, $newUsed, $sailPower, $type, $makeModel, $country, $priceFrom, $priceTo, $currency, $charterPeriod									 , $lengthFrom, $lengthTo, $lengthUnit, $yearFrom, $yearTo, $orderBy, $queryStringStartCharacter = "?"){	//Only bother adding the page param if it's greater than zero.	if($page > 1){$queryString[] = "page=" . $page;}	//Add the other params if they are not blank.	if($saleCharter != ""){$queryString[] = "saleCharter=" . urlencode($saleCharter);}	if($newUsed != ""){$queryString[] = "newUsed=" . urlencode($newUsed);}	if($sailPower != ""){$queryString[] = "sailPower=" . urlencode($sailPower);}	if($type != ""){$queryString[] = "type=" . urlencode($type);}	if($makeModel != ""){$queryString[] = "makeModel=" . urlencode($makeModel);}	if($country != ""){$queryString[] = "country=" . urlencode($country);}	if($priceFrom != ""){$queryString[] = "priceFrom=" . urlencode($priceFrom);}	if($priceTo != ""){$queryString[] = "priceTo=" . urlencode($priceTo);}	if($currency != ""){$queryString[] = "currency=" . urlencode($currency);}	if($charterPeriod != ""){$queryString[] = "charterPeriod=" . urlencode($charterPeriod);}	if($lengthFrom != ""){$queryString[] = "lengthFrom=" . urlencode($lengthFrom);}	if($lengthTo != ""){$queryString[] = "lengthTo=" . urlencode($lengthTo);}	if($lengthUnit != ""){$queryString[] = "lengthUnit=" . urlencode($lengthUnit);}	if($yearFrom != ""){$queryString[] = "yearFrom=" . urlencode($yearFrom);}	if($yearTo != ""){$queryString[] = "yearTo=" . urlencode($yearTo);}	if($orderBy != ""){$queryString[] = "orderBy=" . urlencode($orderBy);}	//Join the array elements into a string separated by &.	$redirectUrl = join("&", $queryString);	//Add the first character (e.g. ? or &) if the redirect URL is not zero length string.	if($redirectUrl != ""){$redirectUrl = $queryStringStartCharacter . $redirectUrl;}	return $redirectUrl;}//Gets the value of a variable named $paramName from the session variable or querystring, giving preference to the value in the querystring.//If the value comes from the querystring, this also updates the session variable with that value.function getFromSessionOrQueryStringAndUpdateSession($paramName){	if($_REQUEST[$paramName] != ""){		//Querystring param is not blank use this value in preference to the session var of the same name		$returnVal = $_REQUEST[$paramName];		//Update the session var with the new value		$_SESSION[$paramName] = $returnVal;	}else{		//Querystring param is blank, use the session var instead		$returnVal = $_SESSION[$paramName];	}	return $returnVal;}//Used for setting which option of a select input should be selected.//Outputs selected="selected" if the values match.function isOptionSelected($optionValue, $value){	if(strtolower($optionValue) == strtolower($value)){		return " selected=\"selected\"";	}}//Convert a value in feet to a value in metres.function feetToMetres($valueInFeet){	return $valueInFeet * 0.3048;}//Convert a value in metres to a value in feet and inches.function metresToFeetAndInches($valueInMetres){	if($valueInMetres == ""){		return "";	}else{		$valueInFeet = $valueInMetres * 3.2808399;		//Get number of whole feet.		$wholeFeet = floor($valueInFeet);		//Get the fraction of feet.		$fractionFeet = $valueInFeet - $wholeFeet;		//Convert the fraction of feet into inches.		$inches = 12 * floor($fractionFeet);		//Return the result.		return $wholeFeet . "'" . $inches . "\"";	}}//Format the sales status.function formatSalesStatus($value){	$value = strtolower($value);	if($value == "underoffer"){		$value = "under offer";	}	return ucfirst($value);}?>